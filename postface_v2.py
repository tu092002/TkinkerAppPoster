

import asyncio
from tkinter import *
from tkinter import filedialog
import os
import threading
import json
import random
import urllib.parse
from playwright.async_api import async_playwright
import requests
from tkinter import simpledialog, messagebox,filedialog

# === C·∫§U H√åNH ===
REMOTE_DEBUGGING_URL = "http://localhost:9225"
GROUP_FILE = "chinhoanh - Copy.txt"
POSTED_FILE = "chinhoanh - Copy (2).txt"
IMAGE_FOLDER = r"C:\\Users\\Admin\\Music\\nu5"
DEFAULT_CONTENT = "NUBIRA CH·∫†Y C·ª∞C NGON, GI√Å CH·ªà 23 TRI·ªÜU, ƒêƒÇNG KI·ªÇM C√íN, XE ·ªû SAIGON, LI√äN H·ªÜ 0936401783"
API_LOGIN_URL = "https://4e9c-42-118-190-115.ngrok-free.app/api/login/"
TOKEN_FILE = "token.json"
    

def save_token(token: str):
    with open(TOKEN_FILE, "w") as f:
        json.dump({"token": token}, f)


def load_token() -> str | None:
    if os.path.exists(TOKEN_FILE):
        try:
            with open(TOKEN_FILE, "r") as f:
                return json.load(f)["token"]
        except:
            return None
    return None


def request_login():
    root = Tk()
    root.withdraw()

    while True:
        username = simpledialog.askstring("ƒêƒÉng nh·∫≠p", "T√™n ƒëƒÉng nh·∫≠p:")
        if username is None:
            root.destroy()
            return None  # Ng∆∞·ªùi d√πng b·∫•m Cancel

        password = simpledialog.askstring("M·∫≠t kh·∫©u", "Nh·∫≠p m·∫≠t kh·∫©u:", show="*")
        if password is None:
            root.destroy()
            return None

        try:
            response = requests.post(API_LOGIN_URL, json={"username": username, "password": password})
            if response.status_code == 200:
                data = response.json()
                token = data.get("token")
                if not token:
                    messagebox.showerror("L·ªói", "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token t·ª´ server.")
                    continue
                save_token(token)
                messagebox.showinfo("Th√†nh c√¥ng", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                root.destroy()
                return token
            else:
                messagebox.showerror("Th·∫•t b·∫°i", "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói k·∫øt n·ªëi: {e}")



class AutoPosterGUI:
    
    def __init__(self, master,token):
        self.token = token

        self.CHUNK_SIZE = 8
        self.REST_SECONDS_BETWEEN_CHUNKS = 300

        self.master = master
        master.title("üöÄ Auto Post Facebook Group (Playwright GUI)")

        self.is_running = True
        self.is_paused = False

        Label(master, text="üìù N·ªôi dung b√†i ƒëƒÉng:", font=("Arial", 10, "bold")).pack()
        self.content_text = Text(master, height=5, width=80)
        self.content_text.insert(END, DEFAULT_CONTENT)
        self.content_text.pack()

        Button(master, text="üìÅ ·∫¢nh: Ch·ªçn th∆∞ m·ª•c", command=self.choose_folder).pack(pady=5)
        self.image_folder = IMAGE_FOLDER

        self.choice = IntVar(value=1)
        Radiobutton(master, text="1. Ti·∫øp t·ª•c", variable=self.choice, value=1).pack(anchor="w")
        Radiobutton(master, text="2. ƒêƒÉng l·∫°i t·ª´ ƒë·∫ßu", variable=self.choice, value=2).pack(anchor="w")

        button_frame = Frame(master)
        button_frame.pack(pady=10)

        Button(button_frame, text="üü¢ ƒêƒÇNG B√ÄI", bg="#4CAF50", fg="white", width=12, command=self.start_posting).grid(row=0, column=0, padx=5)
        Button(button_frame, text="üü° T·∫†M D·ª™NG", bg="#FFC107", fg="black", width=12, command=self.pause).grid(row=0, column=1, padx=5)
        Button(button_frame, text="üîµ TI·∫æP T·ª§C", bg="#03A9F4", fg="white", width=12, command=self.resume).grid(row=0, column=2, padx=5)
        Button(button_frame, text="üî¥ D·ª™NG", bg="#F44336", fg="white", width=12, command=self.stop).grid(row=0, column=3, padx=5)
        Button(button_frame, text="üîç T√¨m Nh√≥m ƒêƒÉng", bg="#9C27B0", fg="white", width=15, command=self.open_search_dialog).grid(row=0, column=4, padx=5)

        self.join_button = Button(button_frame, text="üë• Tham gia c√°c nh√≥m", bg="#795548", fg="white", width=15, command=self.join_groups_from_list)
        self.join_button.grid(row=0, column=5, padx=5)

        Label(master, text="üìã K·∫øt qu·∫£", font=("Arial", 10, "bold")).pack()
        self.result_text = Text(master, height=15, width=100)
        self.result_text.pack()

    def choose_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.image_folder = folder

    def log(self, message):
        self.result_text.insert(END, message + "\n")
        self.result_text.see(END)

    def pause(self):
        self.is_paused = True
        self.log("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng.")

    def resume(self):
        self.is_paused = False
        self.log("‚ñ∂Ô∏è Ti·∫øp t·ª•c.")

    def stop(self):
        self.is_running = False
        self.log("üõë ƒê√£ y√™u c·∫ßu d·ª´ng.")

    def start_posting(self):
        threading.Thread(target=lambda: asyncio.run(self.main()), daemon=True).start()

    def join_groups_from_list(self):
        self.join_button.config(state=DISABLED, text="‚è≥ ƒêang tham gia...")
        threading.Thread(target=self._join_groups_wrapper, daemon=True).start()

    def _join_groups_wrapper(self):
        asyncio.run(self._join_groups())
        self.join_button.config(state=NORMAL, text="üë• Tham gia c√°c nh√≥m")

    def open_search_dialog(self):
        search_window = Toplevel(self.master)
        search_window.title("üîç Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
        search_window.geometry("+1000+50")

        Label(search_window, text="üîé T·ª´ kh√≥a t√¨m ki·∫øm:").pack(padx=10, pady=5)
        keyword_entry = Entry(search_window, width=40)
        keyword_entry.pack(padx=10, pady=5)

        def perform_search(mode):
            keyword = keyword_entry.get().strip()
            if keyword:
                threading.Thread(target=lambda: asyncio.run(self.search_facebook(keyword, mode)), daemon=True).start()

        Button(search_window, text="‚ûï T√¨m ki·∫øm & Th√™m v√†o danh s√°ch nh√≥m", bg="#4CAF50", fg="white", command=lambda: perform_search("append")).pack(pady=5)
        Button(search_window, text="üÜï T√¨m ki·∫øm T·∫°o danh s√°ch nh√≥m m·ªõi", bg="#F44336", fg="white", command=lambda: perform_search("overwrite")).pack(pady=5)

    async def search_facebook(self, keyword, mode="append"):
        try:
            async with async_playwright() as p:
                browser = await p.chromium.connect_over_cdp(REMOTE_DEBUGGING_URL)
                context = browser.contexts[0]
                page = await context.new_page()

                encoded_keyword = urllib.parse.quote(keyword)
                search_url = f"https://www.facebook.com/search/groups?q={encoded_keyword}"
                await page.goto(search_url, timeout=60000)

                self.log(f"üîç ƒê√£ t√¨m nh√≥m v·ªõi t·ª´ kh√≥a: {keyword}")
                await page.wait_for_timeout(3000)

                for _ in range(10):
                    await page.mouse.wheel(0, 10000)
                    await asyncio.sleep(2)

                hrefs = await page.eval_on_selector_all("a[href]", "elements => elements.map(e => e.href)")
                group_links = [
                    href for href in hrefs
                    if href.startswith("http") and "group" in href and "?__tn__=%3C" not in href and "/search/groups/" not in href
                ]

                unique_links = list(set(group_links))

                existing_links = set()
                if os.path.exists(GROUP_FILE) and mode == "append":
                    with open(GROUP_FILE, "r", encoding="utf-8") as f:
                        existing_links = set(line.strip() for line in f if line.strip())

                new_links = [link for link in unique_links if link not in existing_links]

                if new_links:
                    write_mode = "a" if mode == "append" else "w"
                    with open(GROUP_FILE, write_mode, encoding="utf-8") as f:
                        for link in new_links:
                            f.write(link + "\n")
                    action = "Th√™m" if mode == "append" else "Ghi ƒë√®"
                    self.log(f"‚úÖ {action} {len(new_links)} nh√≥m m·ªõi v√†o {GROUP_FILE}")
                else:
                    self.log("‚ö†Ô∏è Kh√¥ng c√≥ nh√≥m m·ªõi n√†o c·∫ßn ghi (ƒë√£ c√≥ trong file).")

        except Exception as e:
            self.log(f"‚ùå L·ªói khi t√¨m ki·∫øm: {str(e)}")

    def chunk_groups(self, groups, size):
        for i in range(0, len(groups), size):
            yield groups[i:i + size]

    async def _join_groups(self):
        self.log("üîÑ B·∫Øt ƒë·∫ßu tham gia c√°c nh√≥m trong danh s√°ch...")

        if not os.path.exists(GROUP_FILE):
            self.log(f"‚ùå Kh√¥ng t√¨m th·∫•y file nh√≥m: {GROUP_FILE}")
            return

        with open(GROUP_FILE, "r", encoding="utf-8") as f:
            all_groups = [line.strip() for line in f if line.strip()]

        if not all_groups:
            self.log("‚ö†Ô∏è Danh s√°ch nh√≥m tr·ªëng.")
            return

        chunks = list(self.chunk_groups(all_groups, self.CHUNK_SIZE))
        total_chunks = len(chunks)

        async with async_playwright() as p:
            browser = await p.chromium.connect_over_cdp(REMOTE_DEBUGGING_URL)
            context = browser.contexts[0]
            page = await context.new_page()

            for chunk_index, chunk in enumerate(chunks):
                self.log(f"\nüî∑ ƒê·ª£t {chunk_index + 1}/{total_chunks} ‚Äî T·ªïng {len(chunk)} nh√≥m")

                for index, link in enumerate(chunk):
                    if not self.is_running:
                        self.log("üõë ƒê√£ d·ª´ng qu√° tr√¨nh tham gia nh√≥m.")
                        return

                    self.log(f"\n‚û°Ô∏è ({index + 1}/{len(chunk)}) Nh√≥m: {link}")
                    try:
                        await page.goto(link, timeout=60000)
                        await page.wait_for_timeout(5000)

                        # üëâ N·∫øu ph√°t hi·ªán popup "ƒê√≥ng", b·ªè qua nh√≥m n√†y
                        try:
                            close_btn = page.locator('[aria-label="ƒê√≥ng"]')
                            if await close_btn.count() > 0:
                                self.log("‚ùó Ph√°t hi·ªán popup ‚Äî b·ªè qua nh√≥m n√†y.")
                                continue
                        except Exception as e:
                            self.log(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra popup: {e}")

                        # Ki·ªÉm tra n√∫t tham gia
                        joined = False
                        join_button = page.locator("span", has_text="Tham gia nh√≥m")
                        if await join_button.count() > 0:
                            try:
                                await join_button.first.click()
                                self.log("‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu tham gia.")
                                joined = True
                            except:
                                self.log("‚ö†Ô∏è Kh√¥ng th·ªÉ click n√∫t 'Tham gia nh√≥m'. B·ªè qua nh√≥m n√†y.")
                                continue
                        else:
                            self.log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t 'Tham gia nh√≥m'. C√≥ th·ªÉ ƒë√£ tham gia. B·ªè qua nh√≥m n√†y.")
                            continue

                        # M√¥ ph·ªèng h√†nh vi
                        has_liked = False
                        has_commented = False

                        actions = (
                            ["pause"] * 3 +
                            ["scroll_down"] * 3 +
                            ["scroll_up"] * 2 +
                            (["pause_and_like"] if not has_liked else []) +
                            (["pause_and_comment"] if not has_commented else []) +
                            ["nothing"] * 2
                        )

                        random.shuffle(actions)
                        action_count = random.randint(10, 18)

                        for step in range(action_count):
                            if not self.is_running:
                                return
                            while self.is_paused:
                                await asyncio.sleep(1)

                            if not actions:
                                break
                            action = actions.pop()

                            if action == "pause":
                                pause_time = random.randint(3, 8)
                                self.log(f"‚è∏Ô∏è D·ª´ng l·∫°i {pause_time}s nh∆∞ ƒëang ƒë·ªçc b√†i...")
                                await asyncio.sleep(pause_time)

                            elif action == "scroll_down":
                                scroll_amount = random.randint(300, 1000)
                                self.log(f"üñ±Ô∏è Cu·ªôn xu·ªëng nh·∫π {scroll_amount}px")
                                await page.mouse.wheel(0, scroll_amount)
                                await asyncio.sleep(random.randint(1, 3))

                            elif action == "scroll_up":
                                scroll_amount = random.randint(100, 500)
                                self.log(f"üñ±Ô∏è Cu·ªôn l√™n nh·∫π {scroll_amount}px")
                                await page.mouse.wheel(0, -scroll_amount)
                                await asyncio.sleep(random.randint(1, 2))

                            elif action == "pause_and_like" and not has_liked:
                                self.log("‚ù§Ô∏è D·ª´ng v√† th·ª≠ Like...")
                                await asyncio.sleep(random.randint(2, 4))
                                try:
                                    like_button = page.locator('[aria-label="Th√≠ch"]')
                                    if await like_button.count() > 0:
                                        await like_button.first.click()
                                        has_liked = True
                                        self.log("‚úÖ ƒê√£ Like b√†i.")
                                except:
                                    self.log("‚ö†Ô∏è Kh√¥ng th·ªÉ Like.")

                            elif action == "pause_and_comment" and not has_commented:
                                self.log("üí¨ D·ª´ng v√† th·ª≠ comment...")
                                await asyncio.sleep(random.randint(4, 6))
                                try:
                                    comment_box = page.locator('[aria-label="Vi·∫øt c√¢u tr·∫£ l·ªùi..."]')
                                    if await comment_box.count() > 0:
                                        await comment_box.first.click()
                                        await asyncio.sleep(1)
                                        comment = random.choice([
                                            "Quan t√¢m ·∫°.", "ƒê·∫∑t c·ªçc sao b√°c?", "·ª¶ng h·ªô b√†i vi·∫øt!",
                                            "Gi√° ·ªïn ƒë√≥.", "C·∫ßn th√™m ·∫£nh nh√©."
                                        ])
                                        await comment_box.first.fill(comment)
                                        await comment_box.first.press("Enter")
                                        has_commented = True
                                        self.log(f"üí¨ ƒê√£ comment: {comment}")
                                except:
                                    self.log("‚ö†Ô∏è Kh√¥ng th·ªÉ comment.")

                            else:
                                self.log("üòê Kh√¥ng l√†m g√¨ trong b∆∞·ªõc n√†y.")
                                await asyncio.sleep(random.randint(1, 3))

                            self.result_text.delete("end-2l", "end-1l")
                            self.result_text.insert(END, f"‚è≥ M√¥ ph·ªèng h√†nh vi ({step + 1}/{action_count})...\n")
                            self.result_text.see(END)

                        progress = int((index + 1) / len(chunk) * 100)
                        self.log(f"üìä Ti·∫øn ƒë·ªô ƒë·ª£t n√†y: {progress}%")

                    except Exception as e:
                        self.log(f"‚ùå L·ªói khi tham gia nh√≥m: {str(e)}")
                        continue

                if chunk_index < total_chunks - 1:
                    self.log(f"\n‚è∏Ô∏è Ngh·ªâ {self.REST_SECONDS_BETWEEN_CHUNKS // 60} ph√∫t tr∆∞·ªõc ƒë·ª£t ti·∫øp theo...")
                    for i in range(self.REST_SECONDS_BETWEEN_CHUNKS, 0, -1):
                        if not self.is_running:
                            return
                        while self.is_paused:
                            await asyncio.sleep(1)

                        self.result_text.delete("end-2l", "end-1l")
                        self.result_text.insert(END, f"üïí Ngh·ªâ {i} gi√¢y...\n")
                        self.result_text.see(END)
                        await asyncio.sleep(1)

            await page.close()
            await browser.close()
            self.log("\nüéâ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c nh√≥m.")

    
   


if __name__ == "__main__":
    token = load_token()
    if not token:
        token = request_login()

    if token:
        root = Tk()
        app = AutoPosterGUI(root, token=token)
        root.mainloop()
    # token = show_login()  # ‚Üê ƒêƒÉng nh·∫≠p tr∆∞·ªõc
    # root = Tk()
    # app = AutoPosterGUI(root)
    # root.mainloop()

