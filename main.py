from tkinter import Tk
from auth import load_token, refresh_access_token,custom_login_dialog
from gui import AutoPosterGUI
import requests
from config import TOKEN_FILE
import subprocess
import os
def is_token_valid(token: str) -> bool:
    try:
        resp = requests.get("https://httpbin.org/bearer", headers={"Authorization": f"Bearer {token}"})
        return resp.status_code == 200
    except:
        return False
    
# def run_app():
#     root = Tk()
#     root.withdraw()  # ·∫®n c·ª≠a s·ªï root ban ƒë·∫ßu

#     while True:
#         token = None
#         tokens = load_token()

#         if tokens:
#             token = tokens.get("access")
#             refresh = tokens.get("refresh")

#             if not is_token_valid(token) and refresh:
#                 token = refresh_access_token(refresh)

#         if not token:
#             token = custom_login_dialog(root)  # Truy·ªÅn root

#         if not token:
#             print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.")
#             break

#         try:
#             root.deiconify()  # Hi·ªán root ƒë·ªÉ ch·∫°y GUI ch√≠nh
#             app = AutoPosterGUI(root, token)
#             root.mainloop()
#         except Exception as e:
#             print(f"‚ùå L·ªói khi ch·∫°y GUI: {e}")
#             break

#         if not os.path.exists(TOKEN_FILE):
#             continue
#         else:
#             break

def run_app():
    while True:
        root = Tk()
        root.withdraw()

        token = None
        tokens = load_token()

        if tokens:
            token = tokens.get("access")
            refresh = tokens.get("refresh")
            if not is_token_valid(token) and refresh:
                token = refresh_access_token(refresh)

        if not token:
            token = custom_login_dialog(root)

        if not token:
            print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.")
            root.destroy()
            break

        try:
            root.deiconify()
            app = AutoPosterGUI(root, token)
            root.mainloop()
        except Exception as e:
            print(f"‚ùå L·ªói khi ch·∫°y GUI: {e}")
        finally:
            root.destroy()

        # üîÑ Quay l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p n·∫øu file token kh√¥ng t·ªìn t·∫°i
        if not os.path.exists(TOKEN_FILE):
            continue
        else:
            break



def start_chrome_debug():
    chrome_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
    chrome_user_data = r"C:\ChromeDebug"  # B·∫°n c√≥ th·ªÉ ch·ªçn n∆°i kh√°c n·∫øu mu·ªën

    # N·∫øu th∆∞ m·ª•c ch∆∞a c√≥, t·∫°o m·ªõi
    os.makedirs(chrome_user_data, exist_ok=True)

    # Kh·ªüi ch·∫°y Chrome n·∫øu ch∆∞a ch·∫°y
    try:
        subprocess.Popen([
            chrome_path,
            f'--remote-debugging-port=9225',
            f'--user-data-dir={chrome_user_data}'
        ])
    except FileNotFoundError:
        print("‚ùå Kh√¥ng t√¨m th·∫•y Chrome. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")

if __name__ == "__main__":
    start_chrome_debug()

    run_app()
